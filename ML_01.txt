import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset=pd.read_csv('/content/HousingData.csv')
X=dataset.iloc[:,:-1].values
Y=dataset.iloc[:,-1].values

dataset.head()

dataset.shape

dataset.info()

dataset.isnull().sum()

dataset.dropna(inplace=True)

dataset.isnull().sum()

dataset.drop(columns='B',inplace = True)

x=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.2,random_state = 0)

print("xtrain shape : ", xtrain.shape)
print("xtest shape  : ", xtest.shape)
print("ytrain shape : ", ytrain.shape)
print("ytest shape  : ", ytest.shape)


from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(xtrain, ytrain)

y_pred = regressor.predict(xtest)


plt.scatter(ytest, y_pred, c = 'red')
plt.xlabel("Price: in $1000's")
plt.ylabel("Predicted value")
plt.title("True value vs predicted value : Linear Regression")
plt.show()


from sklearn.metrics import mean_squared_error, mean_absolute_error
mse = mean_squared_error(ytest, y_pred)
mae = mean_absolute_error(ytest,y_pred)
print("Mean Square Error : ", mse)
print("Mean Absolute Error : ", mae)


import seaborn as sns
plt.figure(figsize=(12,12))
sns.heatmap(data=dataset.corr().round(2),annot=True,cmap='coolwarm',linewidths=0.2,square=True)

df1 = dataset[['RM','TAX','PTRATIO','LSTAT']]
df1.head()


df1.shape


x=df1.iloc[:,:-1].values
y=df1.iloc[:,-1].values

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.2,random_state = 0)

print("xtrain shape : ", xtrain.shape)
print("xtest shape  : ", xtest.shape)
print("ytrain shape : ", ytrain.shape)
print("ytest shape  : ", ytest.shape)



from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(xtrain, ytrain)
y_pred = regressor.predict(xtest)


plt.scatter(ytest, y_pred, c = 'red')
plt.xlabel("Price: in $1000's")
plt.ylabel("Predicted value")
plt.title("True value vs predicted value : Linear Regression")
plt.show()


from sklearn.metrics import mean_squared_error, mean_absolute_error
mse = mean_squared_error(ytest, y_pred)
mae = mean_absolute_error(ytest,y_pred)
print("Mean Square Error : ", mse)
print("Mean Absolute Error : ", mae)
# ,'MEDV' removed end maI




